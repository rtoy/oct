;;; -*- Mode: lisp -*-

;; If you want all core functions to be inline (like the C++ code
;; does), add :qd-inline to *features* by enabling the following line.
;; This makes compilation much, much slower, but the resulting code
;; conses much less and is significantly faster.
#+(not (and cmu x86))
(eval-when (:load-toplevel :compile-toplevel :execute)
  (pushnew :qd-inline *features*))

;; To be able to inline all the functions, we need to make
;; *inline-expansion-limit* much larger.
;;
;; Not sure we really want to inline everything, but the QD C++ code
;; inlines all of the functions so we do the same.  This makes CMUCL
;; take a very long time to compile the code, and the resulting
;; functions are huge.  (I think div-qd is 8 KB, and sqrt-qd is a
;; whopping 30 KB!)
;;
#+(and cmu qd-inline)
(eval-when (:load-toplevel :compile-toplevel :execute)
  (setf ext:*inline-expansion-limit* 1600))

(mk:defsystem qd
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :components
  ((:file "qd-package")
   (:file "qd-rep" :depends-on ("qd-package"))
   #-cmu
   (:file "qd-dd" :depends-on ("qd-package"))
   (:file "qd"
	  :depends-on ("qd-rep"))
   (:file "qd-io"
	  :depends-on ("qd"))
   (:file "qd-const"
	  :depends-on ("qd-io"))
   (:file "qd-fun"
	  :depends-on ("qd" "qd-const"))
   (:file "qd-class"
	  :depends-on ("qd-fun"))
   (:file "qd-methods"
	  :depends-on ("qd-class"))
   (:file "qd-format"
	  :depends-on ("qd-methods"))
   (:file "qd-complex"
	  :depends-on ("qd-methods"))
   ))


(mk:defsystem qd-extras
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("qd")
  :components
  ((:file "qd-extra")))
  
(mk:defsystem qd-test
  :source-pathname (make-pathname :directory (pathname-directory *load-pathname*))
  :depends-on ("qd" "qd-extras")
  :components
  ((:file "qd-test")
   (:file "tests")
   (:file "branch-test")))

